#!/usr/bin/env python3

import re
from gradelib import *

r = Runner(save("xv6.out"))

PTE_PRINT = """page table 0x9000000097f74000
..0: pte 0x0000000097f6f001 pa 0x0000000097f6f000
.. ..0: pte 0x0000000097f6e001 pa 0x0000000097f6e000
.. .. ..0: pte 0x0000000097f6d001 pa 0x0000000097f6d000
.. .. .. ..0: pte 0x0000000097f7019f pa 0x0000000097f70000
.. .. .. ..1: pte 0x0000000097f6c193 pa 0x0000000097f6c000
.. .. .. ..2: pte 0x0000000097f6b19f pa 0x0000000097f6b000
.. ..255: pte 0x0000000097f73001 pa 0x0000000097f73000
.. .. ..511: pte 0x0000000097f72001 pa 0x0000000097f72000
.. .. .. ..511: pte 0x0000000097f71001 pa 0x0000000097f71000
.. .. .. .. ..510: pte 0x4000000097f7e09d pa 0x0000000097f7e000
.. .. .. .. ..511: pte 0x4000000097f7f193 pa 0x0000000097f7f000"""

VAL_RE = "(0x[0-9]0000000[0-9a-f]+)"
INDENT_RE = r"\s*\.\.\s*"
INDENT_ESC = "\\\s*\.\.\\\s*"

@test(0, "pgtbltest")
def test_pgtbltest():
    r.run_qemu(shell_script([
        'pgtbltest'
    ]), timeout=300)

@test(10, "pgtbltest: ugetpid", parent=test_pgtbltest)
def test_nettest_():
    r.match('^ugetpid_test: OK$')

@test(10, "pgtbltest: pgaccess", parent=test_pgtbltest)
def test_nettest_():
    r.match('^pgaccess_test: OK$')

@test(10, "pte printout")
def test_pteprint():
    first = True
    r.run_qemu(shell_script([
        'echo hi'
    ]))
    r.match('^hi')
    p = re.compile(VAL_RE)
    d = re.compile(INDENT_RE)
    for l in PTE_PRINT.splitlines():
        l = d.sub(INDENT_ESC, l)
        l = p.sub(VAL_RE, l)
        r.match(r'^{}$'.format(l))
        if first:
            first = False
        else:
            matches = re.findall(r'^{}$'.format(l), r.qemu.output, re.MULTILINE)
            assert_equal(len(matches[0]), 2)
            pa1 = int(matches[0][0], 16) & 0xfffffffff000
            pa2 = int(matches[0][1], 16) & 0xfffffffff000
            assert_equal(pa1, pa2)

# @test(5, "answers-pgtbl.txt")
# def test_answers():
#     # just a simple sanity check, will be graded manually
#     check_answers("answers-pgtbl.txt")

# @test(0, "usertests")
# def test_usertests():
#     r.run_qemu(shell_script([
#         'usertests'
#     ]), timeout=300)

# @test(10, "usertests: all tests", parent=test_usertests)
# def test_usertests():
#     r.match('^ALL TESTS PASSED$')

# @test(1, "time")
# def test_time():
#     check_time()

# usertests MAXVAplus test can't pass, which may be qemu's bug. TLBR->TLBR->...

run_tests()
